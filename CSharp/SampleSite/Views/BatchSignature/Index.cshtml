@using Lacuna.RestPki.SampleSite.Models
@model BatchSignatureModel
<h2>Simple Batch Signature</h2>

<form id="signForm" method="POST">

	<div class="form-group">
		<label>File to sign</label>
		<p>
			You'll be signing the following files:
			@* UL element to hold the batch's documents (we'll render these programatically, see javascript below) *@
			<ul id="docList" />
		</p>
	</div>

	@* Render a select (combo box) to list the user's certificates. For now it will be empty, we'll populate it later on (see javascript below). *@
	<div class="form-group">
		<label for="certificateSelect">Choose a certificate</label>
		<select id="certificateSelect" class="form-control"></select>
	</div>

	@*
		Action buttons. Notice that the "Sign File" button is NOT a submit button. When the user clicks the button,
		we must first use the Web PKI component to perform the client-side computation necessary and only when
		that computation is finished we'll submit the form programmatically (see javascript below).
	*@
	<button id="signButton" type="button" class="btn btn-primary">Sign Batch</button>
	<button id="refreshButton" type="button" class="btn btn-default">Refresh Certificates</button>

</form>

@* Panel to hold the BlockUI message so that we can change the message during processing *@
<div id="blockPanel" style="display: none">
	<h2 id="blockMessage"></h2>
</div>

@section Scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://webpki.lacunasoftware.com/#/Documentation
	*@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.3.1.js")"></script>

	<script>

		// We'll use the Model.DocumentIds filled by the server to render a Javascript array. This will render something like this:
		// var batchDocIds = [ 1,2,3,4,5,6,7,8,9,10 ];
		var batchDocIds = [ @string.Join("," , Model.DocumentIds) ];

		// Auxiliary global variables
		var docIndex = -1;
		var selectedCertThumbprint = null;

		// Create an instance of the LacunaWebPKI object
		var pki = new LacunaWebPKI();

		// -------------------------------------------------------------------------------------------------
		// Function called once the page is loaded
		// -------------------------------------------------------------------------------------------------
		function init() {

			// Block the UI while we get things ready
			$.blockUI();

			// Render documents to be signed
			var docList = $('#docList');
			for (var i = 0; i < batchDocIds.length; i++) {
				var docId = batchDocIds[i];
				docList.append(
					$('<li />').append(
						$('<a />').text('Document ' + docId).attr('href', '/Download/Doc/' + docId)
					)
				);
			}

			// Wireup of button clicks
			$('#signButton').click(sign);
			$('#refreshButton').click(refresh);

			// Call the init() method on the LacunaWebPKI object, passing a callback for when
			// the component is ready to be used and another to be called when an error occurrs
			// on any of the subsequent operations. For more information, see:
			// https://webpki.lacunasoftware.com/#/Documentation#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates, // as soon as the component is ready we'll load the certificates
				defaultError: onWebPkiError // generic error callback on Content/js/app/site.js
			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button
		// -------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates
			$.blockUI();
			// Invoke the loading of the certificates
			loadCertificates();
		}

		// -------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user
		// clicks the "Refresh" button. At this point, the UI is already blocked.
		// -------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates({

				// specify that expired certificates should be ignored
				filter: pki.filters.isWithinValidity,

				// in order to list only certificates within validity period and having a CPF (ICP-Brasil), use this instead:
				//filter: pki.filters.all(pki.filters.hasPkiBrazilCpf, pki.filters.isWithinValidity),

				// id of the select to be populated with the certificates
				selectId: 'certificateSelect',

				// function that will be called to get the text that should be displayed for each option
				selectOptionFormatter: function (cert) {
					return cert.subjectName + ' (issued by ' + cert.issuerName + ')';
				}

			}).success(function () {

				// once the certificates have been listed, unblock the UI
				$.unblockUI();

			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Sign Batch" button
		// -------------------------------------------------------------------------------------------------
		function sign() {

			// Block the UI while we perform the signature
			$.blockUI({ message: $('#blockPanel') });
			$('#blockMessage').text('Please wait ...');

			// Get the thumbprint of the selected certificate
			selectedCertThumbprint = $('#certificateSelect').val();

			// Call the preauthorizeSignatures() to request authorization to perform the N signatures
			pki.preauthorizeSignatures({
				certificateThumbprint: selectedCertThumbprint,
				signatureCount: batchDocIds.length
			}).success(signNextDoc); // If the user authorizes the operation, call signNextDoc() to sign the first document
		}

		// -------------------------------------------------------------------------------------------------
		// Function that signs the next document in the batch or finishes the operation if the batch is
		// completed.
		// -------------------------------------------------------------------------------------------------
		function signNextDoc() {
			// Increment the docIndex
			docIndex += 1;
			// Check if the batch is completed
			if (docIndex < batchDocIds.length) {
				// If the batch is not completed, get the next document ID
				var docId = batchDocIds[docIndex];
				// Change the block message
				$('#blockMessage').text('Signing Document ' + docId + ' ...');
				// Call the server asynchronously to start the signature (the server will call REST PKI and will return the signature operation token)
				$.ajax({
					url: '/BatchSignature/Start/' + docId,
					method: 'POST',
					dataType: 'json',
					success: onSignatureStarted, // callback if the operation suceeds
					error: onStepServerError
				});
			} else {
				// If the batch is completed, we'll notify the user and unblock the UI
				addAlert('info', 'Batch processing completed');
				// Prevent user from clicking "sign batch" again (our logic isn't prepared for that)
				$('#signButton').prop('disabled', true);
				// Unblock the UI
				$.unblockUI();
			}
		}

		// -------------------------------------------------------------------------------------------------
		// Function that is called once the server has called REST PKI to start the signature on the current
		// document being signed and has returned the operation token (in "response").
		// -------------------------------------------------------------------------------------------------
		function onSignatureStarted(response) {
			// Call signWithRestPki() on the Web PKI component passing the token received from REST PKI and the certificate
			// selected by the user.
			pki.signWithRestPki({
				token: response,
				thumbprint: selectedCertThumbprint
			}).success(onSignaturePerformed).error(onStepError);
		}

		// -------------------------------------------------------------------------------------------------
		// Function that is called once the signature operation is performed
		// -------------------------------------------------------------------------------------------------
		function onSignaturePerformed(token) {
			// Call the server asynchronously to notify that the signature has been performed
			$.ajax({
				url: '/BatchSignature/Complete/' + token, // The signature process token is guaranteed to be URL-safe
				method: 'POST',
				dataType: 'json',
				success: onSignatureCompleted, // callback if the operation suceeds
				error: onStepServerError
			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function that is called once the server acknowledges that the current document's signature was
		// saved sucessfully
		// -------------------------------------------------------------------------------------------------
		function onSignatureCompleted(signedFileId) {

			// Render a "->" and a link to the signed document
			var docLi = $('#docList li').eq(docIndex);
			docLi.append(
				document.createTextNode(' ')
			).append(
				$('<span />').addClass('glyphicon glyphicon-arrow-right')
			).append(
				document.createTextNode(' ')
			).append(
				$('<a />').text(signedFileId.replace('_', '.')).attr('href', '/Download/File/' + signedFileId)
			);

			// Sign the next document (or stop, if the batch is done)
			signNextDoc();
		}

		// -------------------------------------------------------------------------------------------------
		// Function if an error occurrs while calling the server to start or complete a signature
		// -------------------------------------------------------------------------------------------------
		function onStepServerError(jqXHR, textStatus, errorThrown) {
			if (errorThrown) {
				onStepError('Server responded with an error: ' + errorThrown);
			} else {
				onStepError('Error calling server: ' + textStatus);
			}
		}

		// -------------------------------------------------------------------------------------------------
		// Function if an error occurrs while signing the current document
		// -------------------------------------------------------------------------------------------------
		function onStepError(error) {

			// Alert the user with the error message
			addAlert('danger', 'An error has occurred while signing Document ' + batchDocIds[docIndex] + ': ' + error);

			// Render a "x" on the document list
			var docLi = $('#docList li').eq(docIndex);
			docLi.append(
				document.createTextNode(' ')
			).append(
				$('<span />').addClass('glyphicon glyphicon-remove')
			);

			// Sign the next document (or stop, if the batch is done)
			signNextDoc();
		}

		// Schedule the init function to be called once the page is loaded
		$(document).ready(init);

	</script>
}
